АРХИТЕКТУРА BACKEND - СЛОИСТАЯ СТРУКТУРА

┌─────────────────────────────────────────────────────────────────┐
│                        HTTP LAYER                              │
│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐ │
│  │ Auth Controller │  │ Book Controller │  │Customer Controller│ │
│  │                 │  │                 │  │                 │ │
│  │ /auth/login     │  │ /books          │  │ /customers      │ │
│  │ /auth/me        │  │ /books/{id}     │  │ /customers/{id} │ │
│  └─────────────────┘  └─────────────────┘  └─────────────────┘ │
│  ┌─────────────────┐  ┌─────────────────┐                     │
│  │Issue Controller │  │   Main.py       │                     │
│  │                 │  │                 │                     │
│  │ /issues         │  │ FastAPI App     │                     │
│  │ /customers/{id} │  │ CORS Middleware │                     │
│  │ /books/{id}     │  │ Router Include  │                     │
│  └─────────────────┘  └─────────────────┘                     │
└─────────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────┐
│                      SERVICE LAYER                             │
│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐ │
│  │  Auth Service   │  │  Book Service   │  │Customer Service │ │
│  │                 │  │                 │  │                 │ │
│  │ • login()       │  │ • get_books()   │  │ • get_customers()│ │
│  │ • verify_token()│  │ • create_book() │  │ • create_customer│ │
│  │ • get_user()    │  │ • update_book() │  │ • update_customer│ │
│  └─────────────────┘  └─────────────────┘  └─────────────────┘ │
│  ┌─────────────────┐                                           │
│  │ Issue Service   │                                           │
│  │                 │                                           │
│  │ • create_issue()│                                           │
│  │ • return_book() │                                           │
│  │ • renew_issue() │                                           │
│  │ • get_history() │                                           │
│  └─────────────────┘                                           │
└─────────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────┐
│                    REPOSITORY LAYER                            │
│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐ │
│  │ Book Repository │  │Author Repository│  │Customer Repository│ │
│  │                 │  │                 │  │                 │ │
│  │ • get_by_key()  │  │ • get_by_key()  │  │ • get_by_id()   │ │
│  │ • search_books()│  │ • search_authors│  │ • search_customers│ │
│  │ • create()      │  │ • create()      │  │ • create()      │ │
│  │ • update()      │  │ • update()      │  │ • update()      │ │
│  │ • delete()      │  │ • delete()      │  │ • delete()      │ │
│  └─────────────────┘  └─────────────────┘  └─────────────────┘ │
│  ┌─────────────────┐  ┌─────────────────┐                     │
│  │ Issue Repository│  │ Base Repository │                     │
│  │                 │  │                 │                     │
│  │ • create_issue()│  │ • get_by_id()   │                     │
│  │ • return_book() │  │ • get_all()     │                     │
│  │ • renew_issue() │  │ • create()      │                     │
│  │ • get_history() │  │ • update()      │                     │
│  │ • get_overdue() │  │ • delete()      │                     │
│  └─────────────────┘  └─────────────────┘                     │
└─────────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────┐
│                      DATA LAYER                                │
│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐ │
│  │   SQLAlchemy    │  │   PostgreSQL    │  │   Pydantic      │ │
│  │     Models      │  │    Database     │  │     DTOs        │ │
│  │                 │  │                 │  │                 │ │
│  │ • Book          │  │ • books         │  │ • BookCreateDTO │ │
│  │ • Author        │  │ • authors       │  │ • BookResponseDTO│ │
│  │ • Customer      │  │ • customers     │  │ • CustomerDTO   │ │
│  │ • Issue         │  │ • issues        │  │ • IssueDTO      │ │
│  │ • BookSubject   │  │ • book_subjects │  │ • AuthDTO       │ │
│  │ • BookCover     │  │ • book_covers   │  │                 │ │
│  └─────────────────┘  └─────────────────┘  └─────────────────┘ │
└─────────────────────────────────────────────────────────────────┘

ПОТОК ДАННЫХ:

HTTP Request
    │
    ▼
Controller (HTTP логика, валидация)
    │
    ▼
Service (Бизнес-логика, преобразования)
    │
    ▼
Repository (Доступ к данным, SQL запросы)
    │
    ▼
Database (Хранение данных)
    │
    ▼
Model (SQLAlchemy объекты)
    │
    ▼
DTO (Pydantic объекты для API)
    │
    ▼
HTTP Response

ПРЕИМУЩЕСТВА:

1. РАЗДЕЛЕНИЕ ОТВЕТСТВЕННОСТИ
   - Каждый слой имеет четкую роль
   - Легко тестировать изолированно
   - Изменения не влияют на другие слои

2. МАСШТАБИРУЕМОСТЬ
   - Простое добавление новых функций
   - Легкое расширение API
   - Возможность замены компонентов

3. ТЕСТИРУЕМОСТЬ
   - Изолированное тестирование слоев
   - Простые моки для зависимостей
   - Четкие интерфейсы

4. ПОДДЕРЖИВАЕМОСТЬ
   - Понятная структура кода
   - Документированные интерфейсы
   - Легкие изменения и отладка




